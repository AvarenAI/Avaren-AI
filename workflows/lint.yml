name: Code Linting Pipeline

# Define when the workflow should run
on:
  push:
    branches:
      - main
      - develop
      - feature/**
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch: # Allow manual triggering for testing or debugging

# Define permissions for the workflow
permissions:
  contents: read
  checks: write
  pull-requests: write

# Define environment variables for reuse across jobs
env:
  RUST_VERSION: '1.74.0'
  PYTHON_VERSION: '3.11'
  GO_VERSION: '1.21'
  NODE_VERSION: '18'

# Define jobs for linting different languages
jobs:
  # Job for Rust linting using cargo fmt and clippy
  rust-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run cargo fmt (check formatting)
        run: cargo fmt --version && cargo fmt --all -- --check
        continue-on-error: false

      - name: Run cargo clippy (linting)
        run: cargo clippy --version && cargo clippy --all-features --all -- -D warnings
        continue-on-error: false

      - name: Annotate Rust issues in PR
        if: github.event_name == 'pull_request' && failure()
        uses: actions/github-script@v6
        with:
          script: |
            const output = await exec.getExecOutput('cargo fmt --all -- --check');
            if (output.exitCode !== 0) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `Rust formatting issues detected:\n\`\`\`\n${output.stderr}\n\`\`\``
              });
            }

  # Job for Python linting using flake8 and black
  python-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python linting tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort

      - name: Run black (check formatting)
        run: black --version && black --check .
        continue-on-error: false

      - name: Run isort (check import sorting)
        run: isort --version && isort --check-only --diff .
        continue-on-error: false

      - name: Run flake8 (linting)
        run: flake8 --version && flake8 .
        continue-on-error: false

      - name: Annotate Python issues in PR
        if: github.event_name == 'pull_request' && failure()
        uses: actions/github-script@v6
        with:
          script: |
            const output = await exec.getExecOutput('black --check .');
            if (output.exitCode !== 0) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `Python formatting issues detected:\n\`\`\`\n${output.stderr}\n\`\`\``
              });
            }

  # Job for Go linting using golangci-lint
  go-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install golangci-lint
        run: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2

      - name: Run golangci-lint
        run: golangci-lint run --timeout=5m --verbose
        env:
          GOLANGCI_LINT_CACHE: /tmp/golangci-lint-cache
        continue-on-error: false

      - name: Annotate Go issues in PR
        if: github.event_name == 'pull_request' && failure()
        uses: actions/github-script@v6
        with:
          script: |
            const output = await exec.getExecOutput('golangci-lint run --timeout=5m');
            if (output.exitCode !== 0) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `Go linting issues detected:\n\`\`\`\n${output.stderr}\n\`\`\``
              });
            }

  # Job for TypeScript linting using ESLint and Prettier
  typescript-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache Node.js dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install dependencies
        run: npm ci || npm install

      - name: Run Prettier (check formatting)
        run: npx prettier --version && npx prettier --check .
        continue-on-error: false

      - name: Run ESLint (linting)
        run: npx eslint --version && npx eslint .
        continue-on-error: false

      - name: Annotate TypeScript issues in PR
        if: github.event_name == 'pull_request' && failure()
        uses: actions/github-script@v6
        with:
          script: |
            const output = await exec.getExecOutput('npx eslint .');
            if (output.exitCode !== 0) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `TypeScript linting issues detected:\n\`\`\`\n${output.stderr}\n\`\`\``
              });
            }

# Define a final job to ensure all linting jobs pass
  lint-summary:
    runs-on: ubuntu-latest
    needs: [rust-lint, python-lint, go-lint, typescript-lint]
    steps:
      - name: Check linting status
        run: echo "All linting jobs completed. Check individual job logs for details."
